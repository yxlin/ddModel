// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dfastdm
std::vector<double> dfastdm(Rcpp::NumericVector rt_r, Rcpp::NumericVector parameters_r, bool is_lower);
RcppExport SEXP _ddModel_dfastdm(SEXP rt_rSEXP, SEXP parameters_rSEXP, SEXP is_lowerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rt_r(rt_rSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type parameters_r(parameters_rSEXP);
    Rcpp::traits::input_parameter< bool >::type is_lower(is_lowerSEXP);
    rcpp_result_gen = Rcpp::wrap(dfastdm(rt_r, parameters_r, is_lower));
    return rcpp_result_gen;
END_RCPP
}
// pfastdm
Rcpp::NumericVector pfastdm(Rcpp::NumericVector rt_r, Rcpp::NumericVector parameters_r, bool is_lower);
RcppExport SEXP _ddModel_pfastdm(SEXP rt_rSEXP, SEXP parameters_rSEXP, SEXP is_lowerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rt_r(rt_rSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type parameters_r(parameters_rSEXP);
    Rcpp::traits::input_parameter< bool >::type is_lower(is_lowerSEXP);
    rcpp_result_gen = Rcpp::wrap(pfastdm(rt_r, parameters_r, is_lower));
    return rcpp_result_gen;
END_RCPP
}
// rfastdm
Rcpp::DataFrame rfastdm(unsigned int n, Rcpp::NumericVector parameters_r, Rcpp::NumericVector time_parameters_r, bool debug);
RcppExport SEXP _ddModel_rfastdm(SEXP nSEXP, SEXP parameters_rSEXP, SEXP time_parameters_rSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type parameters_r(parameters_rSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type time_parameters_r(time_parameters_rSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(rfastdm(n, parameters_r, time_parameters_r, debug));
    return rcpp_result_gen;
END_RCPP
}
// validate_ddm_parameters
bool validate_ddm_parameters(const Rcpp::S4& rt_model_r, const Rcpp::NumericVector& parameters_r, bool debug);
RcppExport SEXP _ddModel_validate_ddm_parameters(SEXP rt_model_rSEXP, SEXP parameters_rSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type rt_model_r(rt_model_rSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type parameters_r(parameters_rSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(validate_ddm_parameters(rt_model_r, parameters_r, debug));
    return rcpp_result_gen;
END_RCPP
}
// simulate_ddm_trials
Rcpp::DataFrame simulate_ddm_trials(const Rcpp::S4& rt_model_r, const Rcpp::NumericVector& parameters_r, Rcpp::NumericVector time_parameters_r, unsigned int n_trial, bool debug);
RcppExport SEXP _ddModel_simulate_ddm_trials(SEXP rt_model_rSEXP, SEXP parameters_rSEXP, SEXP time_parameters_rSEXP, SEXP n_trialSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type rt_model_r(rt_model_rSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type parameters_r(parameters_rSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type time_parameters_r(time_parameters_rSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_trial(n_trialSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_ddm_trials(rt_model_r, parameters_r, time_parameters_r, n_trial, debug));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ddModel_dfastdm", (DL_FUNC) &_ddModel_dfastdm, 3},
    {"_ddModel_pfastdm", (DL_FUNC) &_ddModel_pfastdm, 3},
    {"_ddModel_rfastdm", (DL_FUNC) &_ddModel_rfastdm, 4},
    {"_ddModel_validate_ddm_parameters", (DL_FUNC) &_ddModel_validate_ddm_parameters, 3},
    {"_ddModel_simulate_ddm_trials", (DL_FUNC) &_ddModel_simulate_ddm_trials, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_ddModel(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
